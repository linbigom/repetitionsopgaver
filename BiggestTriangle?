from math import sqrt, acos, sin
from itertools import combinations 

N = int(input())

coordinatList = []
for n in range(N):
    temp = list(map(int,input().split()))
    tempList = []
    tempList.append(temp[0])
    tempList.append(temp[1])
    coordinatList.append(tempList)

print(coordinatList)
print(coordinatList[0][0])

fistCoordinates = []
secondCoordinates = []
for i in coordinatList:
    fistCoordinates.append(int(coordinatList[i][0]))
    secondCoordinates.append(coordinatList[i][1])

indexForRight = fistCoordinates.index(max(fistCoordinates))
indexForLeft = fistCoordinates.index(min(fistCoordinates))
indexForUp = secondCoordinates.index(max(secondCoordinates))
indexForDown = secondCoordinates.index(min(secondCoordinates))

reducedCoordinatlist = []
reducedCoordinatlist.append(coordinatList[indexForRight])
reducedCoordinatlist.append(coordinatList[indexForLeft])
reducedCoordinatlist.append(coordinatList[indexForUp])
reducedCoordinatlist.append(coordinatList[indexForDown])

print(reducedCoordinatlist)

ALL_COMBOS_OF_POINTS = itertools.combinations(reducedCoordinatlist,3) 

listOfAreas = []
for kordinat in ALL_COMBOS_OF_POINTS:
    area = determineTri(kordinat)
    listOfAreas.append(area)

print(max(listOfAreas))

def determineTri(kordinat):
    A = kordinat[0]
    B = kordinat[1]
    C = kordinat[2]

    #LÃ¦ngden af a, b og c
    l_a = sqrt((C[0]-B[0])**2+(C[1]-B[1])**2)
    l_b = sqrt((C[0]-A[0])**2+(C[1]-A[1])**2)
    l_c = sqrt((B[0]-A[0])**2)((B[1]-A[1])**2)
    #Vinklen A fundet ved Arccos((b^2+c^2-a^2)/2*b*c)
    v_A = acos(((l_b**2)+(l_c**2)-(l_a**2))/(2*l_b*l_c))
    #Arealet fundet ved sin(A)*b*c*1/2
    Area = (sin(v_A)*l_b*l_c)/2
    return Area

